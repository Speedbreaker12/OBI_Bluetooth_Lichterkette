const { exec } = require('child_process');

// **Konstanten**
let bluetoothAdapter = 'hci0';
const deviceAddress = '24:35:02:27:DE:6E';
const characteristicHandle = '0x0025';
const datapointOnOff = 'javascript.0.MeineVariablen.Lichterkette_OnOff';
const datapointBrightness = 'javascript.0.MeineVariablen.Lichterkette_Helligkeit';
const pushoverDevice = 'iphone-Fabian';

const actionQueue = [];
let isProcessing = false;
let isResetting = false;
const MAX_RETRIES = 20;

// Funktion: Bluetooth-Adapter aktivieren
function activateBluetoothAdapter() {
    return new Promise((resolve, reject) => {
        exec(`hciconfig ${bluetoothAdapter} up`, (error, stdout, stderr) => {
            if (error) {
                log(`‚ùå Fehler beim Aktivieren des Adapters ${bluetoothAdapter}: ${stderr || error.message}`, 'error');
                return reject(`Adapter ${bluetoothAdapter} konnte nicht aktiviert werden.`);
            }
            log(`‚úÖ Bluetooth-Adapter ${bluetoothAdapter} erfolgreich aktiviert: ${stdout.trim()}`, 'info');
            resolve();
        });
    });
}

// Funktion: Shell-Befehl ausf√ºhren
function executeCommand(command, timeout = 20000) {
    return new Promise((resolve, reject) => {
        const process = exec(command, (error, stdout, stderr) => {
            if (error) {
                clearTimeout(timeoutId);

                const warningErrors = [
                    "Device or resource busy",
                    "Function not implemented",
                    "Software caused connection abort"
                ];

                const isWarningError = warningErrors.some((warning) =>
                    (stderr || error.message).includes(warning)
                );

                const logLevel = isWarningError ? 'warn' : 'error';
                log(`‚ùå Fehler beim Ausf√ºhren des Befehls: ${stderr || error.message}`, logLevel);
                return reject(stderr || error.message);
            }
            clearTimeout(timeoutId);
            resolve(stdout.trim());
        });

        const timeoutId = setTimeout(() => {
            if (!process.killed) process.kill('SIGTERM');
            reject('Befehl abgebrochen (Timeout)');
        }, timeout);
    });
}

// Funktion: GATT-Wert schreiben
async function writeGattValue(value) {
    const command = `gatttool -i ${bluetoothAdapter} -b ${deviceAddress} --char-write-req --handle=${characteristicHandle} --value="${value}"`;
    log(`üì° Sende GATT-Wert: ${value}`, 'info');
    return executeCommand(command);
}

// Wiederholtes Schreiben mit Validierung und Logging
async function writeGattValueWithRetries(value, oldValue, datapoint, initialDelay = 5000) {
    if (!datapoint) {
        log('‚ùå Fehler: Datenpunkt ist nicht definiert!', 'error');
        throw new Error('Datenpunkt f√ºr writeGattValueWithRetries ist undefined.');
    }

    log(`‚öôÔ∏è writeGattValueWithRetries gestartet:`, 'info');
    log(`  - Wert: ${value}`, 'info');
    log(`  - Alter Wert: ${oldValue}`, 'info');
    log(`  - Datenpunkt: ${datapoint}`, 'info');

    let attempts = 0;
    let delay = initialDelay;

    while (attempts < MAX_RETRIES) {
        try {
            log(`üîÑ Versuch ${attempts + 1}/${MAX_RETRIES}: Sende GATT-Wert`, 'info');
            await writeGattValue(value);
            log(`‚úÖ GATT-Wert erfolgreich gesendet.`, 'info');
            return; // Erfolgreich, keine weiteren Versuche n√∂tig
        } catch (error) {
            attempts++;
            log(`‚ö†Ô∏è Warnung beim Senden (Versuch ${attempts}/${MAX_RETRIES}): ${error}`, 'warn');
            if (attempts >= MAX_RETRIES) {
                log('‚ùå Maximale Anzahl an Versuchen erreicht. Abbruch.', 'error');

                // Sicheres Zur√ºcksetzen
                if (oldValue !== undefined && oldValue !== null) {
                    isResetting = true;
                    log(`üîô Setze Datenpunkt "${datapoint}" auf den alten Wert: ${oldValue}`, 'info');
                    setState(datapoint, oldValue, true);
                    isResetting = false;
                } else {
                    log(`‚ùå Fehler: Alter Wert f√ºr "${datapoint}" ist undefined oder null. Kein Zur√ºcksetzen m√∂glich.`, 'error');
                }

                sendPushoverNotification(
                    `‚ùå Befehl konnte nach ${MAX_RETRIES} Versuchen nicht gesendet werden: ${value}`
                );
                throw new Error('GATT-Befehl konnte nach mehreren Versuchen nicht gesendet werden.');
            }
            await new Promise((resolve) => setTimeout(resolve, delay));
            delay *= 1.1; // Erh√∂he die Verz√∂gerung bei jedem Versuch
        }
    }
}

// Verbesserte Warteschlangenverarbeitung
async function processQueue() {
    if (isProcessing) {
        log('‚è≥ Warteschlange wird bereits verarbeitet. Vorgang abgebrochen.', 'info');
        return;
    }

    if (actionQueue.length === 0) {
        log('‚úÖ Warteschlange ist leer. Keine Aktionen zu verarbeiten.', 'info');
        return;
    }

    log(`üìã Starte Verarbeitung der Warteschlange (Aktuell: ${actionQueue.length} Aktionen)...`, 'info');
    isProcessing = true;

    while (actionQueue.length > 0) {
        const currentAction = actionQueue[0]; // Verarbeite immer das erste Element der Warteschlange

        log(`‚öôÔ∏è Verarbeite Aktion: ${JSON.stringify(currentAction)}`, 'info');

        try {
            if (currentAction.brightness !== null) {
                // Helligkeits√§nderung
                const brightnessValue = calculateBrightnessHex(currentAction.brightness);
                await writeGattValueWithRetries(brightnessValue, currentAction.oldValue, datapointBrightness);
                log(`‚úÖ Helligkeitsbefehl gesendet: ${currentAction.brightness}%`, 'info');
            } else if (currentAction.action === 'on' || currentAction.action === 'off') {
                // On/Off-Aktion
                const value = currentAction.action === 'on' ? '01010101' : '01010100';
                await writeGattValueWithRetries(value, currentAction.oldValue, datapointOnOff);
                log(`‚úÖ On/Off-Befehl gesendet: ${currentAction.action}`, 'info');
            } else {
                log(`‚ö†Ô∏è Unbekannte Aktion: ${JSON.stringify(currentAction)}`, 'warn');
            }
        } catch (error) {
            log(`‚ùå Fehler bei der Aktion: ${JSON.stringify(currentAction)}. Fehler: ${error}`, 'error');
        } finally {
            actionQueue.shift(); // Entferne die Aktion nach der Verarbeitung, unabh√§ngig vom Ergebnis
            log(`üîÑ Verbleibende Aktionen in der Warteschlange: ${actionQueue.length}`, 'info');
        }
    }

    log('‚úÖ Verarbeitung der Warteschlange abgeschlossen.', 'info');
    isProcessing = false; // Setze das Flag zur√ºck, nachdem die Verarbeitung beendet ist
}

// Kontrolle der Lampe (On/Off oder Helligkeit)
async function controlLight(action, brightness = null) {
    try {
        if (action) {
            if (brightness !== null) {
                const brightnessValue = calculateBrightnessHex(brightness);
                await writeGattValueWithRetries(brightnessValue, null, datapointBrightness);
            } else {
                const value = action === 'on' ? '01010101' : '01010100';
                await writeGattValueWithRetries(value, null, datapointOnOff);
            }
        }
    } catch (error) {
        throw error;
    }
}

function sendPushoverNotification(message) {
    sendTo("pushover", {
        message: message,
        title: "Lichterkette Fehler",
        device: pushoverDevice
    });
    log(`üì± Pushover-Benachrichtigung gesendet: ${message}`, 'info');
}

function calculateBrightnessHex(brightnessPercent) {
    return `030101${Math.round((brightnessPercent / 100) * 0x64).toString(16).padStart(2, '0')}`;
}

// Listener f√ºr On/Off-Datenpunkt
on({ id: datapointOnOff, change: 'ne' }, async (obj) => {
    if (isResetting || obj.state.ack) return;

    const desiredState = obj.state.val;
    const oldValue = obj.oldState?.val ?? getState(obj.id)?.val ?? false;

    log(`üì• On/Off-Trigger ausgel√∂st:`, 'info');
    log(`  - Neuer Wert: ${desiredState}`, 'info');
    log(`  - Alter Wert (obj.oldState.val): ${obj.oldState?.val ?? 'nicht verf√ºgbar'}`, 'info');
    log(`  - Verwendeter Fallback-Wert: ${oldValue}`, 'info');

    if (desiredState === oldValue) {
        log('‚ÑπÔ∏è Neuer Wert entspricht dem alten Wert. Keine Aktion erforderlich.', 'info');
        return;
    }

    actionQueue.push({ action: desiredState ? 'on' : 'off', brightness: null, oldValue: oldValue });
    log(`‚ûï Aktion zur Warteschlange hinzugef√ºgt: ${desiredState ? 'on' : 'off'}`, 'info');
    await processQueue();
});

// Listener f√ºr Helligkeits-Datenpunkt
on({ id: datapointBrightness, change: 'ne' }, async (obj) => {
    if (isResetting || obj.state.ack) return;

    const desiredBrightness = obj.state.val;
    const oldBrightness = obj.oldState?.val ?? getState(obj.id)?.val ?? 100;

    log(`üì• Helligkeits-Trigger ausgel√∂st:`, 'info');
    log(`  - Neuer Wert: ${desiredBrightness}`, 'info');
    log(`  - Alter Wert (obj.oldState.val): ${obj.oldState?.val ?? 'nicht verf√ºgbar'}`, 'info');
    log(`  - Verwendeter Fallback-Wert: ${oldBrightness}`, 'info');

    if (desiredBrightness === oldBrightness) {
        log('‚ÑπÔ∏è Neuer Wert entspricht dem alten Wert. Keine Aktion erforderlich.', 'info');
        return;
    }

    actionQueue.push({ action: 'on', brightness: desiredBrightness, oldValue: oldBrightness });
    log(`‚ûï Aktion zur Warteschlange hinzugef√ºgt: Helligkeit auf ${desiredBrightness}%`, 'info');
    await processQueue();
});

// Sicherstellen, dass die Datenpunkte existieren
async function ensureStateExists(id, initialValue, common) {
    const state = await getObjectAsync(id);
    if (!state) {
        await createStateAsync(id, initialValue, common);
    }
}

await ensureStateExists(datapointOnOff, false, {
    name: 'Lichterkette On/Off',
    type: 'boolean',
    role: 'switch',
    read: true,
    write: true
});

await ensureStateExists(datapointBrightness, 100, {
    name: 'Lichterkette Helligkeit',
    type: 'number',
    role: 'level.dimmer',
    read: true,
    write: true,
    min: 0,
    max: 100
});

// Skriptstart
(async () => {
    try {
        await activateBluetoothAdapter();
        await processQueue();
    } catch (error) {
        log(`‚ùå Fehler beim Start des Skripts: ${error}`, 'error');
    }
})();
